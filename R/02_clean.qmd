---
title: "02_clean"
format: html
editor: visual
---

## Cleaning of the count matrix

Drop irrelevant columns in the mapping of Ensembl id to gene symbol.

Passing dplyr:: to avoid conflicts between packages in different RStudio servers.

```{r}
ensembl_to_gene_symbol <- ensembl_to_gene_symbol |>
  dplyr::rename(Ensembl_ID = id) |>
  select(gene, Ensembl_ID)
```

Join the count_data and ensembl_to_gene_symbol tables on the "Ensembl_ID" column.

```{r}
count_data <- count_data |>
  inner_join(ensembl_to_gene_symbol, 
             by = "Ensembl_ID") |>
  select(-Ensembl_ID) |>
  relocate(gene)
```

Some genes are repeated in the rows; we need to merge them to ensure each gene is unique, and reverse-transform the data to facilitate this merging.

```{r}
count_data <- count_data |>
  pivot_longer(cols = -1,
               names_to = "sample", 
               values_to = "log2_value") |>
  mutate(count = 2^log2_value - 1) |>
  group_by(gene, sample) |>
  summarise(count = sum(count), 
            .groups = "drop") |>
  pivot_wider(names_from = sample,
              values_from = count)
```

Transpose the data so that observations are in the rows and variables are in the columns, resulting in tidy data.

```{r}
count_data <- count_data |>
  pivot_longer(cols = -gene, 
               names_to = "sample",
               values_to = "count") |>
  mutate(count = round(count)) |>
  pivot_wider(names_from = gene,
              values_from = count)
```

## Cleaning of the clinical data

Remove columns containing redundant or unnecessary information from the clinical_data table.

```{r}
clinical_data_clean <- clinical_data |>
  select(c(
    sample,
    pack_years_smoked.exposures,
    race.demographic, 
    gender.demographic, 
    ajcc_pathologic_stage.diagnoses, 
    vital_status.demographic, 
    tissue_or_organ_of_origin.diagnoses, 
    ajcc_pathologic_m.diagnoses,
    age_at_index.demographic,
    vital_status.demographic
    ))
```

Remove numerical columns with more than two-thirds of values as NAs and retain only rows with tumor samples.

```{r}
clinical_data_clean <- clinical_data_clean |>
  select(where(~ sum(is.na(.)) <= 2/3*nrow(clinical_data_clean))) |>
  filter(tissue_type.samples == "Tumor")
```

Filter the count matrix to retain only the samples present in clinical_data_clean for 'Tumor' tissue type.

```{r}
count_data_clean <- count_data |>
  semi_join(clinical_data_clean, by = "sample")
```

## Data subset

To minimize batch effects in our differential gene expression analysis (DESeq2), we selected only the samples from the International Genomics Consortium, the site with the highest sample count.

```{r}
clinical_data_clean <- clinical_data_clean |> 
  filter(name.tissue_source_site == "International Genomics Consortium" )
```

```{r}
count_data_clean <- count_data_clean |>
  semi_join(clinical_data_clean, by = "sample")
```

To perform differential gene expression analysis (DESeq2) based on patients' smoking habits, we removed rows (samples) with missing (NA) smoking information.

```{r}
clinical_data_clean_DEseq <- clinical_data_clean |> 
  filter(!is.na(pack_years_smoked.exposures))

count_data_clean_DEseq <- count_data_clean |>
  semi_join(clinical_data_clean_DEseq, by = "sample")
```

Transpose the count data matrix to match DESeq2 format, with genes as rows and samples as columns.

```{r}
count_data_clean_DEseq_trans <- count_data_clean_DEseq |>
  pivot_longer(
    cols = -sample, 
    names_to = "gene", 
    values_to = "count"
    ) |>
  pivot_wider(
    names_from = sample, 
    values_from = count
    ) |>
  column_to_rownames(var = "gene")
```

## Save the files into two separate tsv files in the data folder

```{r}
write_tsv(count_data_clean, here("data/02_count_data_clean.tsv"))
```

```{r}
write_tsv(clinical_data_clean, here("data/02_clinical_data_clean.tsv"))
```
